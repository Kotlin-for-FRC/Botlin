import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import edu.wpi.first.toolchain.*

plugins {
    id 'java-library'
    id 'cpp'
    id 'edu.wpi.first.wpilib.repositories.WPILibRepositoriesPlugin'
    id 'edu.wpi.first.NativeUtils'
    id 'edu.wpi.first.GradleJni'
    id 'edu.wpi.first.GradleVsCode'
    id "org.jetbrains.kotlin.jvm"
    id 'maven-publish'
    id "io.deepmedia.tools.deployer"
}

ext.getCurrentArch = {
    return NativePlatforms.desktop
}

def systemArch = getCurrentArch()

apply from: '../config.gradle'

dependencies {
    api project(':units')

    implementation "edu.wpi.first.cscore:cscore-java:$wpilibVersion"
    implementation "edu.wpi.first.cameraserver:cameraserver-java:$wpilibVersion"
    implementation "edu.wpi.first.ntcore:ntcore-java:$wpilibVersion"
    implementation "edu.wpi.first.wpilibj:wpilibj-java:$wpilibVersion"
    implementation "edu.wpi.first.wpiutil:wpiutil-java:$wpilibVersion"
    implementation "edu.wpi.first.wpimath:wpimath-java:$wpilibVersion"
    implementation "edu.wpi.first.wpilibNewCommands:wpilibNewCommands-java:$wpilibVersion"
    implementation "edu.wpi.first.hal:hal-java:$wpilibVersion"
    implementation "org.ejml:ejml-simple:0.43.1"
    implementation "com.fasterxml.jackson.core:jackson-annotations:2.15.2"
    implementation "com.fasterxml.jackson.core:jackson-core:2.15.2"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.15.2"
    implementation 'edu.wpi.first.thirdparty.frc2025.opencv:opencv-java:4.10.0-2'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2"

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

var javaVersion = "17"
def kotlinJvmTarget = JvmTarget.fromTarget(javaVersion.toString())

kotlin {
    compilerOptions {
        jvmTarget.set(kotlinJvmTarget)
        jvmToolchain(Integer.valueOf(javaVersion.toString()))
    }
}

java {
    sourceCompatibility = JavaVersion.toVersion(javaVersion)
    targetCompatibility = JavaVersion.toVersion(javaVersion)

    withSourcesJar()
    withJavadocJar()
}

def artifactGroupId = 'gay.zharel.botlin'
def baseArtifactId = 'botlin'

deployer {
    projectInfo {
        groupId.set(artifactGroupId)
        artifactId.set(baseArtifactId)
        url.set("https://github.com/Kotlin-for-FRC/Botlin")

        scm {
            fromGithub("Kotlin-for-FRC", "Botlin")
        }

        license("BSD-3-Clause", "https://opensource.org/license/bsd-3-clause")

        developer("Zachary Harel", "ftc@zharel.me", null, "https://github.com/zachwaffle4")
    }

    signing {
        key.set(secret("MVN_GPG_KEY"))
        password.set(secret("MVN_GPG_PASSWORD"))
    }

    content {
        component {
            fromJava()
        }
    }

    localSpec("local") {
        release.version = "$version"
    }

    centralPortalSpec("centralPortal") {
        release.version = "$version"
        auth.user.set(secret("SONATYPE_USERNAME"))
        auth.password.set(secret("SONATYPE_PASSWORD"))
    }
}

model {
    components {
        JniLibraryHoneypot(NativeExecutableSpec) {
            sources.cpp {
                source {
                    srcDir 'src/main/native/cpp'
                    include '**/*.cpp'
                }
            }
            nativeUtils.useRequiredLibrary(it, 'wpilib_shared')
        }
    }
    tasks {
        def c = $.components
        def found = false
        c.each {
            if (it in NativeExecutableSpec && it.name == "JniLibraryHoneypot") {
                it.binaries.each {
                    if (!found) {
                        def arch = it.targetPlatform.name
                        if (arch == systemArch) {
                            def filePath = it.tasks.install.installDirectory.get().toString() + File.separatorChar + 'lib'
                            test.dependsOn it.tasks.install

                            test.systemProperty 'java.library.path', filePath

                            found = true
                        }
                    }
                }
            }
        }
    }
}

// Setup Javadocs to link back to WPILib docs
javadoc {
    options {
        links "https://docs.oracle.com/en/java/javase/$javaVersion/docs/api/", 'https://github.wpilib.org/allwpilib/docs/release/java/'
    }
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}