<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/publish-simple.gradle">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/publish-simple.gradle" />
              <option name="updatedContent" value="apply plugin: 'maven-publish'&#10;apply plugin: 'io.deepmedia.tools.deployer'&#10;&#10;def pubVersion = '2025.0.0'&#10;def outputsFolder = file(&quot;$buildDir/outputs&quot;)&#10;def versionFile = file(&quot;$outputsFolder/version.txt&quot;)&#10;&#10;task outputVersions() {&#10;    description = 'Prints the versions to a file for use by the downstream packaging project'&#10;    group = 'Build'&#10;    outputs.files(versionFile)&#10;&#10;    doFirst {&#10;        buildDir.mkdir()&#10;        outputsFolder.mkdir()&#10;    }&#10;&#10;    doLast {&#10;        versionFile.write pubVersion&#10;    }&#10;}&#10;&#10;task copyAllOutputs(type: Copy) {&#10;    destinationDir file(&quot;$buildDir/allOutputs&quot;)&#10;    from versionFile&#10;    dependsOn outputVersions&#10;}&#10;&#10;build.dependsOn outputVersions&#10;build.dependsOn copyAllOutputs&#10;&#10;ext.addTaskToCopyAllOutputs = { task -&gt;&#10;    copyAllOutputs.dependsOn task&#10;    copyAllOutputs.inputs.file task.archiveFile&#10;    copyAllOutputs.from task.archiveFile&#10;}&#10;&#10;def artifactGroupId = 'gay.zharel.botlin'&#10;def baseArtifactId = project.name&#10;def javaBaseName = &quot;_GROUP_gay_zharel_botlin_ID_${baseArtifactId}-java_CLS&quot;&#10;&#10;task sourcesJar(type: Jar, dependsOn: classes) {&#10;    archiveClassifier = 'sources'&#10;    from sourceSets.main.allSource&#10;}&#10;&#10;task javadocJar(type: Jar, dependsOn: javadoc) {&#10;    archiveClassifier = 'javadoc'&#10;    from javadoc.destinationDir&#10;}&#10;&#10;task outputJar(type: Jar, dependsOn: classes) {&#10;    archiveBaseName = javaBaseName&#10;    destinationDirectory = outputsFolder&#10;    from sourceSets.main.output&#10;}&#10;&#10;task outputSourcesJar(type: Jar, dependsOn: classes) {&#10;    archiveBaseName = javaBaseName&#10;    destinationDirectory = outputsFolder&#10;    archiveClassifier = 'sources'&#10;    from sourceSets.main.allSource&#10;}&#10;&#10;task outputJavadocJar(type: Jar, dependsOn: javadoc) {&#10;    archiveBaseName = javaBaseName&#10;    destinationDirectory = outputsFolder&#10;    archiveClassifier = 'javadoc'&#10;    from javadoc.destinationDir&#10;}&#10;&#10;artifacts {&#10;    archives sourcesJar&#10;    archives javadocJar&#10;    archives outputJar&#10;    archives outputSourcesJar&#10;    archives outputJavadocJar&#10;}&#10;&#10;addTaskToCopyAllOutputs(outputSourcesJar)&#10;addTaskToCopyAllOutputs(outputJavadocJar)&#10;addTaskToCopyAllOutputs(outputJar)&#10;&#10;build.dependsOn outputSourcesJar&#10;build.dependsOn outputJavadocJar&#10;build.dependsOn outputJar&#10;&#10;def releasesRepoUrl = &quot;$buildDir/repos/releases&quot;&#10;&#10;publishing {&#10;    repositories {&#10;        maven {&#10;            url = releasesRepoUrl&#10;        }&#10;    }&#10;    publications {&#10;        java(MavenPublication) {&#10;            artifact jar&#10;            artifact sourcesJar&#10;            artifact javadocJar&#10;&#10;            artifactId = &quot;${baseArtifactId}-java&quot;&#10;            groupId artifactGroupId&#10;            version pubVersion&#10;        }&#10;    }&#10;}&#10;&#10;task cleanReleaseRepo(type: Delete) {&#10;    delete releasesRepoUrl&#10;}&#10;&#10;tasks.matching {it != cleanReleaseRepo}.all {it.dependsOn cleanReleaseRepo}&#10;&#10;deployer {&#10;    projectInfo {&#10;        groupId.set(artifactGroupId)&#10;        artifactId.set(baseArtifactId)&#10;        url.set(&quot;https://github.com/Kotlin-for-FRC/Botlin&quot;)&#10;&#10;        scm {&#10;            fromGithub(&quot;Kotlin-for-FRC&quot;, &quot;Botlin&quot;)&#10;        }&#10;&#10;        license(&quot;BSD-3-Clause&quot;, &quot;https://opensource.org/license/bsd-3-clause&quot;)&#10;&#10;        developer(&quot;Zachary Harel&quot;, &quot;ftc@zharel.me&quot;, null, &quot;https://github.com/zachwaffle4&quot;)&#10;    }&#10;&#10;    signing {&#10;        key.set(secret(&quot;MVN_GPG_KEY&quot;))&#10;        password.set(secret(&quot;MVN_GPG_PASSWORD&quot;))&#10;    }&#10;&#10;    content {&#10;        component {&#10;            fromJava()&#10;        }&#10;    }&#10;&#10;    localSpec(&quot;local&quot;) {&#10;        release.version = &quot;$pubVersion-local&quot;&#10;    }&#10;&#10;    centralPortalSpec(&quot;centralPortal&quot;) {&#10;        release.version = &quot;$pubVersion&quot;&#10;        auth.user.set(secret(&quot;SONATYPE_USERNAME&quot;))&#10;        auth.password.set(secret(&quot;SONATYPE_PASSWORD&quot;))&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/settings.gradle">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/settings.gradle" />
              <option name="originalContent" value="pluginManagement {&#10;    repositories {&#10;        mavenLocal()&#10;        gradlePluginPortal()&#10;    }&#10;}&#10;&#10;include 'units', 'botlin'" />
              <option name="updatedContent" value="pluginManagement {&#10;    repositories {&#10;        mavenLocal()&#10;        gradlePluginPortal()&#10;    }&#10;}&#10;&#10;include 'units', 'botlin'" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>